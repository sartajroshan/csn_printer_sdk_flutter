// Autogenerated from Pigeon (v13.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class State(val raw: Int) {
  SUCCESS(0),
  ERROR(1);

  companion object {
    fun ofRaw(raw: Int): State? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PrintInputDataType(val raw: Int) {
  TEXT(0),
  QRCODE(1),
  FEEDLINE(2);

  companion object {
    fun ofRaw(raw: Int): PrintInputDataType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PrintResult (
  val state: State,
  val message: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PrintResult {
      val state = State.ofRaw(list[0] as Int)!!
      val message = list[1] as String
      return PrintResult(state, message)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      state.raw,
      message,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PrintInputData (
  val dataType: PrintInputDataType,
  val inputText: PrintInputText? = null,
  val inputQrCode: PrintInputQrCode? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PrintInputData {
      val dataType = PrintInputDataType.ofRaw(list[0] as Int)!!
      val inputText: PrintInputText? = (list[1] as List<Any?>?)?.let {
        PrintInputText.fromList(it)
      }
      val inputQrCode: PrintInputQrCode? = (list[2] as List<Any?>?)?.let {
        PrintInputQrCode.fromList(it)
      }
      return PrintInputData(dataType, inputText, inputQrCode)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      dataType.raw,
      inputText?.toList(),
      inputQrCode?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PrintInputText (
  val pszString: String,
  val nLan: Long,
  val nOrgx: Long,
  val nWidthTimes: Long,
  val nHeightTimes: Long,
  val nFontType: Long,
  val nFontStyle: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PrintInputText {
      val pszString = list[0] as String
      val nLan = list[1].let { if (it is Int) it.toLong() else it as Long }
      val nOrgx = list[2].let { if (it is Int) it.toLong() else it as Long }
      val nWidthTimes = list[3].let { if (it is Int) it.toLong() else it as Long }
      val nHeightTimes = list[4].let { if (it is Int) it.toLong() else it as Long }
      val nFontType = list[5].let { if (it is Int) it.toLong() else it as Long }
      val nFontStyle = list[6].let { if (it is Int) it.toLong() else it as Long }
      return PrintInputText(pszString, nLan, nOrgx, nWidthTimes, nHeightTimes, nFontType, nFontStyle)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      pszString,
      nLan,
      nOrgx,
      nWidthTimes,
      nHeightTimes,
      nFontType,
      nFontStyle,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PrintInputQrCode (
  val strCodedata: String,
  val nWidthX: Long,
  val nVersion: Long,
  val nErrorCorrectionLevel: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PrintInputQrCode {
      val strCodedata = list[0] as String
      val nWidthX = list[1].let { if (it is Int) it.toLong() else it as Long }
      val nVersion = list[2].let { if (it is Int) it.toLong() else it as Long }
      val nErrorCorrectionLevel = list[3].let { if (it is Int) it.toLong() else it as Long }
      return PrintInputQrCode(strCodedata, nWidthX, nVersion, nErrorCorrectionLevel)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      strCodedata,
      nWidthX,
      nVersion,
      nErrorCorrectionLevel,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object CSNPrinterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PrintInputData.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PrintInputQrCode.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PrintInputText.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PrintResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PrintInputData -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is PrintInputQrCode -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PrintInputText -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is PrintResult -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface CSNPrinterApi {
  fun makePrinterReady(beeper: Boolean, drawer: Boolean, cutter: Boolean, count: Long, width: Long, content: Long, callback: (Result<Boolean?>) -> Unit)
  fun print(data: List<PrintInputData>, callback: (Result<PrintResult?>) -> Unit)
  fun disconnect(callback: (Result<Boolean?>) -> Unit)

  companion object {
    /** The codec used by CSNPrinterApi. */
    val codec: MessageCodec<Any?> by lazy {
      CSNPrinterApiCodec
    }
    /** Sets up an instance of `CSNPrinterApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: CSNPrinterApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.csn_printer_sdk.CSNPrinterApi.makePrinterReady", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val beeperArg = args[0] as Boolean
            val drawerArg = args[1] as Boolean
            val cutterArg = args[2] as Boolean
            val countArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            val widthArg = args[4].let { if (it is Int) it.toLong() else it as Long }
            val contentArg = args[5].let { if (it is Int) it.toLong() else it as Long }
            api.makePrinterReady(beeperArg, drawerArg, cutterArg, countArg, widthArg, contentArg) { result: Result<Boolean?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.csn_printer_sdk.CSNPrinterApi.print", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dataArg = args[0] as List<PrintInputData>
            api.print(dataArg) { result: Result<PrintResult?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.csn_printer_sdk.CSNPrinterApi.disconnect", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.disconnect() { result: Result<Boolean?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
