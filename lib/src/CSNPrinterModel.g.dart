// Autogenerated from Pigeon (v13.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

enum PrintState {
  success,
  error,
}

enum PrintInputDataType {
  text,
  qrCode,
  feedLine,
  alignment,
}

class PrintResult {
  PrintResult({
    required this.state,
    required this.message,
  });

  PrintState state;

  String message;

  Object encode() {
    return <Object?>[
      state.index,
      message,
    ];
  }

  static PrintResult decode(Object result) {
    result as List<Object?>;
    return PrintResult(
      state: PrintState.values[result[0]! as int],
      message: result[1]! as String,
    );
  }
}

class PrintInputData {
  PrintInputData({
    required this.dataType,
    this.inputText,
    this.inputQrCode,
    this.align,
  });

  PrintInputDataType dataType;

  PrintInputText? inputText;

  PrintInputQrCode? inputQrCode;

  int? align;

  Object encode() {
    return <Object?>[
      dataType.index,
      inputText?.encode(),
      inputQrCode?.encode(),
      align,
    ];
  }

  static PrintInputData decode(Object result) {
    result as List<Object?>;
    return PrintInputData(
      dataType: PrintInputDataType.values[result[0]! as int],
      inputText: result[1] != null
          ? PrintInputText.decode(result[1]! as List<Object?>)
          : null,
      inputQrCode: result[2] != null
          ? PrintInputQrCode.decode(result[2]! as List<Object?>)
          : null,
      align: result[3] as int?,
    );
  }
}

class PrintInputText {
  PrintInputText({
    required this.pszString,
    required this.nLan,
    required this.nOrgx,
    required this.nWidthTimes,
    required this.nHeightTimes,
    required this.nFontType,
    required this.nFontStyle,
  });

  String pszString;

  int nLan;

  int nOrgx;

  int nWidthTimes;

  int nHeightTimes;

  int nFontType;

  int nFontStyle;

  Object encode() {
    return <Object?>[
      pszString,
      nLan,
      nOrgx,
      nWidthTimes,
      nHeightTimes,
      nFontType,
      nFontStyle,
    ];
  }

  static PrintInputText decode(Object result) {
    result as List<Object?>;
    return PrintInputText(
      pszString: result[0]! as String,
      nLan: result[1]! as int,
      nOrgx: result[2]! as int,
      nWidthTimes: result[3]! as int,
      nHeightTimes: result[4]! as int,
      nFontType: result[5]! as int,
      nFontStyle: result[6]! as int,
    );
  }
}

class PrintInputQrCode {
  PrintInputQrCode({
    required this.strCodedata,
    required this.nWidthX,
    required this.nVersion,
    required this.nErrorCorrectionLevel,
  });

  String strCodedata;

  int nWidthX;

  int nVersion;

  int nErrorCorrectionLevel;

  Object encode() {
    return <Object?>[
      strCodedata,
      nWidthX,
      nVersion,
      nErrorCorrectionLevel,
    ];
  }

  static PrintInputQrCode decode(Object result) {
    result as List<Object?>;
    return PrintInputQrCode(
      strCodedata: result[0]! as String,
      nWidthX: result[1]! as int,
      nVersion: result[2]! as int,
      nErrorCorrectionLevel: result[3]! as int,
    );
  }
}

class _CSNPrinterApiCodec extends StandardMessageCodec {
  const _CSNPrinterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PrintInputData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PrintInputQrCode) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PrintInputText) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PrintResult) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return PrintInputData.decode(readValue(buffer)!);
      case 129: 
        return PrintInputQrCode.decode(readValue(buffer)!);
      case 130: 
        return PrintInputText.decode(readValue(buffer)!);
      case 131: 
        return PrintResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class CSNPrinterApi {
  /// Constructor for [CSNPrinterApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CSNPrinterApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _CSNPrinterApiCodec();

  Future<bool?> makePrinterReady(bool arg_beeper, bool arg_drawer, bool arg_cutter, int arg_count, int arg_width, int arg_content) async {
    const String channelName = 'dev.flutter.pigeon.csn_printer_sdk.CSNPrinterApi.makePrinterReady';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_beeper, arg_drawer, arg_cutter, arg_count, arg_width, arg_content]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as bool?);
    }
  }

  Future<PrintResult?> print(List<PrintInputData?> arg_data) async {
    const String channelName = 'dev.flutter.pigeon.csn_printer_sdk.CSNPrinterApi.print';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_data]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as PrintResult?);
    }
  }

  Future<bool?> disconnect() async {
    const String channelName = 'dev.flutter.pigeon.csn_printer_sdk.CSNPrinterApi.disconnect';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as bool?);
    }
  }
}
